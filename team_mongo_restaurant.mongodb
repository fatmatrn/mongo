//10. Write a MongoDB query to find the restaurants which locate in latitude value
// less than -95.754168.
use ("restaurants");
db.xyz.find(
             {"address.coord":{$lt:-95.754168}},
             {"name":1,"address.coord":1,"_id":0,"borough":1},
           );


//11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 
//'American' and their grade score more than 70 and latitude less than -65.754168. 

use ("restaurants");
db.xyz.find(
             {$and:[{"cuisine":{$ne:"American "}},{"grades.score":{$gt:70}},{"address.coord":{$lt:-65.754168}}]},
             {"name":1,"borough":1,"coisine":1,"_id":0,"grades.score":1,"address.coord":1}          
             ).count();


//12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of
// 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
//Note : Do this query without using $and operator.




//13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and 
//achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be 
//displayed according to the cuisine in descending order. 


use ("restaurants");
db.xyz.find(
             {$and:[{"cuisine":{$ne:"American "}},{"grades.grade":"A"},{"borough":"Brooklyn"}]},
             {"name":1,"borough":1,"cuisine":1,"_id":0,"grades.grade":1},
             {sort:{"cuisine":-1}}
             )

//14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants 
//which contain 'Wil' as first three letters for its name
use("restaurants")
db.xyz.find({name:{$regex:"^Wil"}},
                    {name:1,borough:1,_id:0,restaurant_id:1,cuisine:1},
                    {})
//15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants
// which contain 'ces' as last three letters for its name.
use("restaurants")
db.xyz.find({name:{$regex:"ces$"}},
                    {name:1,borough:1,_id:0,restaurant_id:1,cuisine:1},
                    {})
//16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants
 //which contain 'Reg' as three letters somewhere in its name.
use("restaurants")
db.xyz.find({name:{$regex:"Reg"}},
                    {name:1,borough:1,_id:0,restaurant_id:1,cuisine:1},
                    {})
//17. Write a MongoDB query to find the restaurants
// which belong to the borough Bronx and prepared either American or Chinese dish.
use("restaurants")
db.xyz.find({$and :[{borough:"Bronx"},{cuisine : {$in :["Chinese","American "]}}]},
                    {name:1,borough:1,_id:0,restaurant_id:1,cuisine:1},
                    {})

//18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which
// belong to the borough  or  or .      
use("restaurants")
db.xyz.find({$or:[{borough:"Staten Island"},{borough:"Queens"},{borough:"Brooklyn"}]},
                    {name:1,borough:1})

//19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which
// are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.


//20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants 
//which achieved a score which is not more than 10.
use("restaurants")
var pipeline =[
                 {$match:{"grades.score":{$lte:10}}},
                 {$group:{_id:"$grades"}},
                 {$project:{"borough":1,"name":1}}
                 ];
 db.xyz.aggregate(pipeline) ;               


use("restaurants")
db.xyz.find({"grades.score":{$lte:10}},{"grades.score":1})


//21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which 
//prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'. 

use("restaurants")
db.xyz.find({$or:[{"cuisine":{$nin:["American ","Chinese"]}},{"name":{$regex:"^Wil"}}]},
{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":0})

use("restaurants")
db.xyz.find({$or:[{"cuisine":{$nin:["American ","Chinese"]}},{"name":{$regex:"^Wil"}}]},
{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":0})

//Soru: 22.  Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" 
//and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates.. 
use("Deneme");
db.restaurants.find(
                    {"grades.date":ISODate("20140811"), "grades.grade":"A", "grades.score":11},
                    {"name":1}
                  );
//Soru 23: Write a MongoDB query to find the restaurant Id, name and grades 
//for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".                  
use("Deneme");
db.restaurants.find(
                    {"grades.1.grade":"A", "grades.1.score":9, "grades.1.date":ISODate("2014-08-11T00:00:00Z")},
                    {"restaurant_id":1, "name":1, "grades":1,"_id":0}
                  );
//Soru 24: Write a MongoDB query to find the restaurant Id, name, address and geographical location for 
//those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.                  
use("Deneme");
db.restaurants.find(
                    {"address.coord.1":{$gt:42, $lte:52}},
                    {"restaurant_id":1, "name":1, "address.coord":1,"_id":0}
                  );
//Soru 25: Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns                  
use("Deneme");
db.restaurants.find({},{"name":1, "_id":0}).sort({"name":1})
//Soru 26:Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns
use("Deneme");
db.restaurants.find({},{"name":1, "_id":0}).sort({"name":-1})
//Soru: 27 Write a MongoDB query to arranged the name of the cuisine in ascending order 
//and for that same cuisine borough should be in descending order.
use("Deneme");
db.restaurants.find({},{"cuisine":1, "_id":0,"borough":1}).sort({"cuisine":1},{"borough":1})
//Soru: 28 Write a MongoDB query to know whether all the addresses contains the street or not.
use("Deneme");
db.restaurants.find({"address.street":{$exists:true}},{"name":1,"_id":0});
//Soru 29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.
use("Deneme");
db.restaurants.find({"address.coord":{$type :1}})